[gd_scene load_steps=6 format=3 uid="uid://f1vvoqdrimh7"]

[ext_resource type="Texture2D" uid="uid://cey74pidop5xu" path="res://circle 128p.png" id="1_yikqb"]

[sub_resource type="GDScript" id="GDScript_eu11m"]
resource_name = "main"
script/source = "extends Node2D
var config: ConfigFile = ConfigFile.new()
@onready var window: Window = get_window()
signal on_window_changed

func _ready():
	if config.load(\"res://config.cfg\") == OK:
		window.position = config.get_value(\"window\",\"position\", Vector2i(1700,900))
		window.size = config.get_value(\"window\",\"size\", Vector2i(128,128))
		print( \"config loaded\" )

func save_cfg():
	config.set_value( \"window\", \"position\", window.position)
	config.set_value( \"window\", \"size\", window.size)
	config.save(\"config.cfg\")
	print(\"config saved\")
"

[sub_resource type="GDScript" id="GDScript_6sbef"]
resource_name = "progress"
script/source = "extends TextureProgressBar
var time : Dictionary
@export var colors : PackedColorArray
@onready var steps: int = colors.size() - 1

func _process(_delta):
	time = Time.get_datetime_dict_from_system()
	value = max_value - time.minute * 60 - time.second
	
	var t: float = value / max_value
	var delta: float = 1.0 / steps
	var index: int = int( t / delta )
	var local_t: float = fmod( t, delta ) / delta
	print(local_t)

	tint_under = colors[index].lerp( colors[index+1], local_t )
#	print(Time.get_ticks_msec())
#	print(time.second)
"

[sub_resource type="GDScript" id="GDScript_xqv6w"]
resource_name = "drag_button"
script/source = "extends Button
var drag_offset : Vector2i
signal on_drag_ended


func _ready():
	on_drag_ended.connect( $\"..\".save_cfg )
	set_process_input(false)


func _input(event):
	if not event is InputEventMouseMotion: return
	get_window().position = DisplayServer.mouse_get_position() - drag_offset


func _on_button_down():
	print(\"drag start\")
	set_process_input(true)
	Engine.max_fps = 60
	drag_offset = DisplayServer.mouse_get_position() - get_window().position


func _on_button_up():
	print(\"drag end\")
	set_process_input(false)
	Engine.max_fps = 1
	on_drag_ended.emit()
"

[sub_resource type="GDScript" id="GDScript_ymbr8"]
resource_name = "resize_button"
script/source = "extends Button
var mouse_offset : Vector2i
signal on_resize_ended

func _ready():
	set_process_input(false)
	on_resize_ended.connect($\"..\".save_cfg)


func _input(event):
	if not event is InputEventMouseMotion: return
	var cursor = DisplayServer.mouse_get_position() + mouse_offset
	var average = ( cursor.x + cursor.y ) / 2
	get_window().size = Vector2i( average, average )


func _on_button_down():
	print(\"resizing start\")
	Engine.max_fps = 60
	set_process_input(true)
	mouse_offset = get_window().size - Vector2i( DisplayServer.mouse_get_position() )


func _on_button_up():
	print(\"resizing end\")
	Engine.max_fps = 1
	set_process_input(false)
	on_resize_ended.emit()
"

[node name="Main" type="Node2D"]
script = SubResource("GDScript_eu11m")

[node name="MinutesProgress" type="TextureProgressBar" parent="."]
offset_right = 283.0
offset_bottom = 247.0
max_value = 3600.0
fill_mode = 5
texture_under = ExtResource("1_yikqb")
texture_progress = ExtResource("1_yikqb")
tint_under = Color(1, 1, 1, 0)
tint_progress = Color(0, 0, 0.160784, 0.752941)
script = SubResource("GDScript_6sbef")
colors = PackedColorArray(1, 0, 1, 0.509804, 0, 0, 1, 0.780392, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1)

[node name="DragButton" type="Button" parent="."]
modulate = Color(1, 1, 1, 0)
offset_right = 128.0
offset_bottom = 128.0
script = SubResource("GDScript_xqv6w")

[node name="ResizeButton" type="Button" parent="."]
modulate = Color(0.796078, 0.796078, 0.796078, 1)
offset_left = 107.0
offset_top = 87.0
offset_right = 124.0
offset_bottom = 104.0
icon = ExtResource("1_yikqb")
expand_icon = true
script = SubResource("GDScript_ymbr8")

[connection signal="button_down" from="DragButton" to="DragButton" method="_on_button_down"]
[connection signal="button_up" from="DragButton" to="DragButton" method="_on_button_up"]
[connection signal="button_down" from="ResizeButton" to="ResizeButton" method="_on_button_down"]
[connection signal="button_up" from="ResizeButton" to="ResizeButton" method="_on_button_up"]
